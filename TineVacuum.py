#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        TineVacuum.py
#
#  Project :     TineVacuum
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      yury.matveev$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["TineVacuum", "TineVacuumClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(TineVacuum.additionnal_import) ENABLED START -----#
import PyTine
#----- PROTECTED REGION END -----#	//	TineVacuum.additionnal_import

# Device States Description
# No states for this device


class TineVacuum (PyTango.LatestDeviceImpl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(TineVacuum.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	TineVacuum.global_variables

    def __init__(self, cl, name):
        PyTango.LatestDeviceImpl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        TineVacuum.init_device(self)
        #----- PROTECTED REGION ID(TineVacuum.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	TineVacuum.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(TineVacuum.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	TineVacuum.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        #----- PROTECTED REGION ID(TineVacuum.init_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	TineVacuum.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(TineVacuum.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	TineVacuum.always_executed_hook

    # -------------------------------------------------------------------------
    #    TineVacuum read/write attribute methods
    # -------------------------------------------------------------------------
    
    
    def read_stellung(self, attr):
        self.debug_stream("In read_stellung()")
        #----- PROTECTED REGION ID(TineVacuum.stellung_read) ENABLED START -----#

        try:
            value = PyTine.get('hasylab/{}/{}'.format(self.TineServer, attr.get_name()), 'stellung')['data']
            attr.set_value(int(value[0]))
        except:
            attr.set_value(None)
        #----- PROTECTED REGION END -----#	//	TineVacuum.stellung_read
        
    
    def initialize_dynamic_attributes(self):
        self.debug_stream("In initialize_dynamic_attributes()")
        
        #   Example to add dynamic attributes
        #   Copy inside the folowing protected area to instanciate at startup.
        
        """   For Attribute stellung
        mystellung = PyTango.Attr('Mystellung', PyTango.DevLong, PyTango.READ)
        self.add_attribute(mystellung,TineVacuum.read_stellung, None, None)
        self.attr_stellung_read = 0
        """

        if self.TineServer is None:
            self.set_state(PyTango.DevState.FAULT)
            return

        try:
            for device in PyTine.list('hasylab', self.TineServer, property='stellung')['devices']:
                stellung = PyTango.Attr(device, PyTango.DevLong, PyTango.READ)
                self.add_attribute(stellung, TineVacuum.read_stellung, None, None)

            self.set_state(PyTango.DevState.ON)
        except:
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION ID(TineVacuum.initialize_dynamic_attributes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	TineVacuum.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(TineVacuum.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	TineVacuum.read_attr_hardware


    # -------------------------------------------------------------------------
    #    TineVacuum command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(TineVacuum.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	TineVacuum.programmer_methods

class TineVacuumClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(TineVacuum.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	TineVacuum.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`TineVacuum.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(TineVacuum.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	TineVacuum.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'TineServer':
            [PyTango.DevString, 
            "the TINE device server address, e.g. ``Petra3_P23vil.CDI.SRV``",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(TineVacuumClass, TineVacuum, 'TineVacuum')
        #----- PROTECTED REGION ID(TineVacuum.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	TineVacuum.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
